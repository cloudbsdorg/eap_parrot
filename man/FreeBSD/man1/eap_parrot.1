'\" t
.\"     Title: eap_parrot
.\"    Author: Mark LaPointe <mark@cloudbsd.org>
.\"      Date: 11/05/2022
.\"    Source: EAP Parrot
.\"  Language: English
.\"
.TH "EAP_PARROT" "1" "11/05/2022" "eap_parrot" "EAP Parrot Reference Guide"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
eap_parrot - replay EAP packets between network interfaces
.SH SYNOPSIS
.HP \w'\fBeap_parrot\fR\ 'u
\fBeap_parrot\fR [-config <path/to/config.toml>]
.SH DESCRIPTION
.P
\fBeap_parrot\fR can be used to replay Extensible Authentication Protocol (EAP) packets between network
interfaces.

.RS 0
EAP Parrot was born due to a frustration with the modem and router combo box provided by AT&\T's fiber service.

.RS 0
The built-in router has very small tables to manage the network traffic from the local area network (LAN).
And if one has a need for more than 40 IP addresses on their LAN, limitations with the router will be hit
even if one decides to utilize static IPv4 and IPv6 addresses.

.RS 0
Connectivity will be impacted by not being reachable by the outside world,
or simply not being able to get a DHCP response from the router even
though one has plenty of room in their configuration.

.RS 0
Let alone that AT&\T has been known to change firewall rules on the router.
.RS 0
ie: Activating rules that cause IPv6 not to function as expected.

.RS 0
EAP Parrot is a tool to create a man-in-the-middle "attack" to authenticate with the connection from AT&\T, where one creates a router with FreeBSD/OpenBSD/etc.
with 3 network interface cards (NIC(s)).

.IP "1." 4
WAN Connection
.RS 4
- Plug into demarcation for AT&\T fiber (Possibly 'The Wall').
.RS 0
- One will have to clone the MAC address of their modem on the WAN interface to properly authenticate.
.RS 0
- "wan_interface" in configuration file.
.RE
.RS -4
.IP "2." 4
Connection to modem
.RS 4
- Plugged into the ONT interface.
.RS 0
- "router_interface" in configuration file.
.RE
.RS -4
.IP "3." 4
Local Area Network
.RS 4
- Plugged into a switch on ones network
.RS 0
- EAP Parrot doesn't need to know about this interface, but one may need it to complete the router.
.RE

.RS -6
.PP
Morton Jonuschat wrote the original eap_parrot service.
.RS 2
- https://github.com/mjonuschat
.RS -2

.SH OPTIONS
.RS 0
\fB\-config\fR <path/to/config.toml>
.RS 6
The path to the configuration file.
.RS 0
Default: /usr/local/etc/eap_parrot/config.toml
.P

.SH RC CONFIGURATION VARIABLES
There are only 2 RC variables, it is nice and simple with an enabled, and configuration file location settings.

.RS -7
eap_parrot_enable
.RS 2
- To state if the service is active or not.
.RS 0
- Expected values of "YES" or "NO".

.RS -2
eap_parrot_config
.RS 2
- The configuration file to be used
.RS 0
- The RC script will default to:
.RS 4
/usr/local/etc/eap_parrot/config.toml
.RS -4
- The service itself was not born of FreeBSD origins and will use:
.RS 4
/etc/eap_parrot/config.toml

.RS -7
Example /etc/rc.conf entries:

.RS 0
# Activate the service
.RS 0
eap_parrot_enable="YES"

.RS 0
# Set a configuration file (optional)
.RS 0
eap_parrot_config="/usr/local/etc/eap_parrot/config.toml"

.SH CONFIGURATION FILE - /usr/local/etc/eap_parrot/config.toml
.P

.RS -7
Example configuration:

.RS 0
[network]
.RS 0
wan_interface="em0"
.RS 0
router_interface="em1"
.RS 0
vlan_id=-1
.RS 0
promiscuous_mode=false

.RS 0
[logging]
.RS 0
syslog=false
.RS 0
debug=false
.RS 0
debug_packets=false

.RS 0
[ignore]
.RS 0
start=false
.RS 0
logoff=false

.SH ACTIVATING EAP PARROT

.RS 0
To enable EAP Parrot via service:
.RS 4
service eap_parrot enable

.RS -4
Then start EAP Parrot via service:
.RS 4
service eap_parrot start

.RS -4
Then stop EAP Parrot via service:
.RS 4
service eap_parrot stop

.SH "AUTHORS"
.PP
Morton Jonuschat wrote the original eap_parrot service.
.RS 2
- https://github.com/mjonuschat
.RS -2
.PP
Mark LaPointe <mark@cloudbsd\&.org> is the maintainer of this FreeBSD port, and author of this manual page.
.RS 2
- https://mark-lapointe.com
.RS 0
- https://cloudbsd.org

.SH "SEE ALSO"
.IP "1." 4
Original Project
.RS 4
\%https://github.com/mjonuschat/eap_parrot
.RE
.IP "2." 4
Source Code
.RS 4
\%https://github.com/cloudbsdorg/eap_parrot
.RE
.IP "3." 4
Using an OpenBSD Router with AT&T U-Verse
.RS 4
\%https://jcs.org/2019/03/21/uverse
.RE

.SH LICENSE
EAP Parrot is licensed with the GNU Public License Version 3.
